server.port=8089

mybatis.mapper-locations=classpath:sharding/*.xml
mybatis.type-aliases-package=com.example.shard.domain


#==================================shardingsphere 配置开始========数据分片======================================
spring.shardingsphere.datasource.names=db0,db1
# 配置第一个数据源
spring.shardingsphere.datasource.db0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.db0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.db0.jdbc-url=jdbc:mysql://rm-bp10zmrn4k515v071o.mysql.rds.aliyuncs.com:3306/db0?useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.db0.username=root
spring.shardingsphere.datasource.db0.password=XIEshuai1122

# 配置第二个数据源
spring.shardingsphere.datasource.db1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.db1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.db1.jdbc-url=jdbc:mysql://rm-bp10zmrn4k515v071o.mysql.rds.aliyuncs.com:3306/db1?useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.db1.username=root
spring.shardingsphere.datasource.db1.password=XIEshuai1122

#shardingjdbc解析上下文和改写后的SQL
spring.shardingsphere.props.sql.show=true

#t_order表
#数据节点
spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=db0.t_user${[0,2]},db1.t_user${[1,3]}
#分库策略，根据user_id最后一位奇数偶数分成两个库
spring.shardingsphere.sharding.tables.t_user.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.t_user.database-strategy.inline.algorithm-expression=db$->{user_id % 2}
#分表策略,根据order_id最后一位奇数偶数分成两个表
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user$->{user_id % 2}
#主键
#spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
# 不配置这个会导致 Type is required 异常
#spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE

#spring.shardingsphere.sharding.tables.t_order_item.actual-data-nodes=ds$->{0..1}.t_order_item$->{0..1}
#spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.sharding-column=order_id
#spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.algorithm-expression=t_order_item$->{order_id % 2}

#spring.shardingsphere.sharding.tables.t_order_item.key-generator.column=order_item_id
#spring.shardingsphere.sharding.tables.t_order_item.key-generator.type=SNOWFLAKE
#spring.shardingsphere.sharding.binding-tables=t_order,t_order_item
#spring.shardingsphere.sharding.broadcast-tables=t_config

#==================================shardingsphere 配置结束==============================================
spring.shardingsphere.encrypt.encryptors.encryptor_aes.type=aes
spring.shardingsphere.encrypt.encryptors.encryptor_aes.props.aes.key.value=123456
#存储明文数据的列
spring.shardingsphere.encrypt.tables.t_order.columns.user_id.plainColumn=user_decrypt
#存储密文数据的列
spring.shardingsphere.encrypt.tables.t_order.columns.user_id.cipherColumn=user_encrypt
spring.shardingsphere.encrypt.tables.t_order.columns.user_id.assistedQueryColumn=user_assisted
spring.shardingsphere.encrypt.tables.t_order.columns.user_id.encryptor=encryptor_aes
